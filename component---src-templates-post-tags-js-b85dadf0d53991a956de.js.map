{"version":3,"sources":["webpack:///./src/templates/post-tags.js","webpack:///./src/components/Pagination.js","webpack:///./src/components/Posts.js"],"names":["TagList","data","pageContext","location","siteTitle","site","siteMetadata","title","currentPage","numPages","tag","isFirst","isLast","prevPage","toLowerCase","nextPage","posts","allMarkdownRemark","nodes","className","to","itemProp","postData","link","pageQuery","Pagination","rel","Array","from","i","key","Posts","map","post","frontmatter","fields","slug","itemScope","itemType","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"oHAAA,0JAqCeA,UA5BC,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC9BC,GAAY,UAAAH,EAAKI,KAAKC,oBAAV,eAAwBC,QAAS,QAC3CC,EAA+BN,EAA/BM,YAAaC,EAAkBP,EAAlBO,SAAUC,EAAQR,EAARQ,IACzBC,EAA0B,IAAhBH,EACVI,EAASJ,IAAgBC,EACzBI,EAAWL,EAAc,GAAM,EAApB,SAAiCE,EAAII,cAArC,SAAgEJ,EAAII,cAApE,KAAqFN,EAAc,GAC9GO,EAAQ,SAAYL,EAAII,cAAhB,KAAiCN,EAAc,GACvDQ,EAAQf,EAAKgB,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQf,SAAUA,EAAUI,MAAOH,EAAWe,UAAS,aAAeT,EAAII,eACxE,kBAAC,IAAD,CAAKP,MAAOG,IACZ,4BAAKA,GACL,kBAAC,IAAD,CAAMU,GAAG,QAAQC,SAAS,OAA1B,qBACA,kBAAC,IAAD,CAAOC,SAAUN,IACjB,kBAAC,IAAD,CACEL,QAASA,EACTC,OAAQA,EACRC,SAAUA,EACVE,SAAUA,EACVN,SAAUA,EACVD,YAAaA,EACbe,KAAI,SAAWb,EAAII,cAAf,QAQL,IAAMU,EAAS,a,kCCvCtB,+CAmDeC,IA/Cf,YAA4F,IAArEd,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,OAAQC,EAAmD,EAAnDA,SAAUE,EAAyC,EAAzCA,SAAUN,EAA+B,EAA/BA,SAAUD,EAAqB,EAArBA,YAAae,EAAQ,EAARA,KACjF,OACE,yBAAKJ,UAAU,eACXR,GACA,kBAAC,IAAD,CAAMQ,UAAU,WAAWC,GAAIP,EAAUa,IAAI,QAA7C,YAKF,yBAAKP,UAAU,YACZX,EAAc,GACb,kBAAC,IAAD,CAAMY,GAAE,GAAKG,GAAb,IACIf,EAAc,GAAK,MAGxBC,EAAW,GAAKkB,MAAMC,KAAK,EAAG,EAAG,EAAG,IAAK,SAAAC,GACxC,OAAIrB,EAAcqB,EAAI,GAEXrB,EAAcqB,EAAIpB,OAD3B,EAKE,kBAAC,IAAD,CACEU,UAAiB,IAANU,EAAU,SAAW,GAChCC,IAAG,qBAAsBD,EAAI,GAC7BT,GAAE,GAAKG,GAAOf,EAAcqB,IAAM,EAAI,GAAKrB,EAAcqB,IAExDrB,EAAcqB,MAMtBrB,EAAcC,EAAW,GACxB,kBAAC,IAAD,CAAMW,GAAE,GAAKG,EAAOd,GACjBA,EAAW,GAAKD,EAAc,GAAK,KAAMC,KAI9CG,GACA,kBAAC,IAAD,CAAMO,UAAU,OAAOC,GAAIL,EAAUW,IAAI,QAAzC,W,yDC5CR,qCAkCeK,IA/Bf,YACE,OAD4B,EAAZT,SAELU,KAAI,SAAAC,GACX,IAAM1B,EAAQ0B,EAAKC,YAAY3B,OAAS0B,EAAKE,OAAOC,KAEpD,OACE,6BACEN,IAAKG,EAAKE,OAAOC,KACjBjB,UAAU,iBACVkB,WAAS,EACTC,SAAS,6BAET,gCACE,4BAAI,kBAAC,IAAD,CAAMlB,GAAIa,EAAKE,OAAOC,KAAMf,SAAS,OAAOd,IAChD,+BAAQ0B,EAAKC,YAAYK,OAG3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQR,EAAKC,YAAYQ,aAAeT,EAAKU,SAE/CtB,SAAS,uB","file":"component---src-templates-post-tags-js-b85dadf0d53991a956de.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Posts from '../components/Posts';\nimport Pagination from '../components/Pagination';\nimport '../styles/templates/taglist.scss';\nimport '../styles/templates/postlist.scss';\n\nconst TagList = ({ data, pageContext, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || 'Title';\n  const { currentPage, numPages, tag } = pageContext;\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? `/tags/${tag.toLowerCase()}` : `/tags/${tag.toLowerCase()}/${currentPage - 1}`;\n  const nextPage = `/tags/${tag.toLowerCase()}/${currentPage + 1}`;\n  const posts = data.allMarkdownRemark.nodes;\n\n  return (\n    <Layout location={location} title={siteTitle} className={`post-list ${tag.toLowerCase()}`}>\n      <SEO title={tag}/>\n      <h1>{tag}</h1>\n      <Link to=\"/blog\" itemProp=\"url\">Back to all posts</Link>\n      <Posts postData={posts} />\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        prevPage={prevPage}\n        nextPage={nextPage}\n        numPages={numPages}\n        currentPage={currentPage}\n        link={`/tags/${tag.toLowerCase()}/`}\n      />\n    </Layout>\n  )\n}\n\nexport default TagList;\n\nexport const pageQuery = graphql`\n  query tagPageQuery($skip: Int!, $limit: Int!, $tag: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        isFuture: { eq: false }\n        frontmatter: { tags: { in: [$tag] } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`;","import React from 'react';\nimport { Link } from 'gatsby';\nimport '../styles/components/pagination.scss';\n\nfunction Pagination ({ isFirst, isLast, prevPage, nextPage, numPages, currentPage, link }) {\n  return (\n    <div className=\"pagination\">\n      {!isFirst && (\n        <Link className=\"previous\" to={prevPage} rel=\"prev\">\n          Previous\n        </Link>\n      )}\n\n      <div className=\"num-wrap\">\n        {currentPage > 2 &&\n          <Link to={`${link}`}>\n            1{currentPage > 3 && '..'}\n          </Link>}\n\n        {numPages > 1 && Array.from([ -1, 0, 1 ], i => {\n          if (currentPage + i < 1) {\n            return;\n          } else if (currentPage + i > numPages) {\n            return;\n          } else {\n            return(\n              <Link\n                className={i === 0 ? 'active' : ''}\n                key={`pagination-number${i + 1}`}\n                to={`${link}${currentPage + i === 1 ? '' : currentPage + i}`}\n              >\n                {currentPage + i}\n              </Link>\n            );\n          }\n        })}\n\n        {currentPage < numPages - 1 &&\n          <Link to={`${link}${numPages}`}>\n            {numPages - 1 != currentPage + 1 && '..'}{numPages}\n          </Link>}\n      </div>\n\n      {!isLast && (\n        <Link className=\"next\" to={nextPage} rel=\"next\">\n          Next\n        </Link>\n      )}\n    </div>\n  );\n}\nexport default Pagination;","import React from 'react';\nimport { Link } from 'gatsby';\n\nfunction Posts ({ postData }) {\n  return (\n    postData.map(post => {\n      const title = post.frontmatter.title || post.fields.slug;\n\n      return (\n        <article\n          key={post.fields.slug}\n          className=\"post-list-item\"\n          itemScope\n          itemType=\"http://schema.org/Article\"\n        >\n          <header>\n            <h2><Link to={post.fields.slug} itemProp=\"url\">{title}</Link></h2>\n            <small>{post.frontmatter.date}</small>\n          </header>\n\n          <section>\n            <p\n              dangerouslySetInnerHTML={{\n                __html: post.frontmatter.description || post.excerpt,\n              }}\n              itemProp=\"description\"\n            />\n          </section>\n\n        </article>\n      );\n    })\n  );\n}\nexport default Posts;"],"sourceRoot":""}