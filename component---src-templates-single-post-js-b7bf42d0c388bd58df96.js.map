{"version":3,"sources":["webpack:///./helpers.js","webpack:///./src/components/tags.js","webpack:///./src/templates/single-post.js"],"names":["module","exports","kebabCase","string","result","replace","match","substr","toLowerCase","Tags","tags","className","map","tag","key","to","itemProp","BlogPostTemplate","data","pageContext","location","post","markdownRemark","otherPosts","morePosts","nodes","siteTitle","site","siteMetadata","title","previous","next","date","frontmatter","update","Article","itemScope","itemType","dangerouslySetInnerHTML","__html","html","Footer","length","i","fields","slug","PostNav","PostLink","link","linkText","rel","description","excerpt","pageQuery"],"mappings":"4EAqBAA,EAAOC,QAAU,CACfC,UAtBF,SAAmBC,GACjB,IAAIC,EAASD,EAgBb,OAFAC,GAHAA,GAHAA,GALAA,EAASA,EAAOC,QAAQ,iBAAiB,SAAUC,GACjD,OAAOA,EAAMC,OAAO,EAAG,GAAK,IAAMD,EAAMC,OAAO,EAAG,GAAGC,kBAIvCA,eAGAH,QAAQ,eAAgB,MAGxBA,QAAQ,MAAO,IAAIA,QAAQ,MAAO,O,2DCfpD,2DAsBeI,IAjBf,YAA0B,IAATC,EAAQ,EAARA,KACf,OACE,yBAAKC,UAAU,QACb,wBAAIA,UAAU,WAAd,eAEA,4BACGD,EAAKE,KAAI,SAAAC,GAAG,OACX,wBAAIC,IAAKZ,oBAAUW,IACjB,kBAAC,IAAD,CAAME,GAAE,SAAWb,oBAAUW,GAAQG,SAAS,OAC5C,0BAAMA,SAAS,YAAYH,Y,kCCdzC,oIAkGeI,UA1FU,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACvCC,EAAOH,EAAKI,eACZC,EAAaL,EAAKM,UAAUC,MAC5BC,GAAY,UAAAR,EAAKS,KAAKC,oBAAV,eAAwBC,QAAS,QAC3CC,EAAyBX,EAAzBW,SAAUC,EAAeZ,EAAfY,KAAMrB,EAASS,EAATT,KAClBsB,EAAOX,EAAKY,YAAYD,KACxBE,EAASb,EAAKY,YAAYC,OAE1BC,EAAU,WACd,OACE,6BACExB,UAAU,YACVyB,WAAS,EACTC,SAAS,6BAGT,gCACE,wBAAIrB,SAAS,YAAYK,EAAKY,YAAYJ,OACzCG,GAAQ,2BAAOrB,UAAU,QAAO,yCAAxB,IAA2CqB,GACnDE,GAAU,2BAAOvB,UAAU,eAAc,0CAA/B,IAAmDuB,IAGhE,6BACEI,wBAAyB,CAAEC,OAAQlB,EAAKmB,MACxCxB,SAAS,kBAOXyB,EAAS,WACb,OACE,gCACE,kBAAC,IAAD,CAAM/B,KAAMA,IAEZ,yBAAKC,UAAU,iBACb,8CACCY,EAAWmB,OACRnB,EAAWX,KAAI,SAACS,EAAMsB,GAAP,OACf,kBAAC,IAAD,CAAM7B,IAAK6B,EAAG5B,GAAIM,EAAKuB,OAAOC,MAAOxB,EAAKY,YAAYJ,UACtD,kDAQNiB,EAAU,WACd,IAAMC,EAAW,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IACjC,OACEF,GACE,4BACE,8BAAOC,EAAP,KACA,kBAAC,IAAD,CAAMlC,GAAIiC,EAAKJ,OAAOC,KAAMK,IAAKA,GAC9BF,EAAKf,YAAYJ,SAO5B,OACE,yBAAKlB,UAAU,iBACb,4BACE,kBAACoC,EAAD,CAAUC,KAAMlB,EAAUmB,SAAS,iBAAiBC,IAAI,SACxD,kBAACH,EAAD,CAAUC,KAAMjB,EAAMkB,SAAS,aAAaC,IAAI,YAMxD,OACE,kBAAC,IAAD,CAAQ9B,SAAUA,EAAUS,MAAOH,EAAWf,UAAU,eACtD,kBAAC,IAAD,CACEkB,MAAOR,EAAKY,YAAYJ,MACxBsB,YAAa9B,EAAKY,YAAYkB,aAAe9B,EAAK+B,UAEpD,yBAAKzC,UAAU,QACb,kBAACwB,EAAD,MACA,6BACA,kBAACM,EAAD,MACA,6BACA,kBAACK,EAAD,SAQD,IAAMO,EAAS,c","file":"component---src-templates-single-post-js-b7bf42d0c388bd58df96.js","sourcesContent":["function kebabCase(string) {\n  var result = string;\n\n  // Convert camelCase capitals to kebab-case.\n  result = result.replace(/([a-z][A-Z])/g, function (match) {\n    return match.substr(0, 1) + '-' + match.substr(1, 1).toLowerCase();\n  });\n\n  // Convert non-camelCase capitals to lowercase.\n  result = result.toLowerCase();\n\n  // Convert non-alphanumeric characters to hyphens\n  result = result.replace(/[^-a-z0-9]+/g, '-');\n\n  // Remove hyphens from both ends\n  result = result.replace(/^-+/, '').replace(/-+$/, '');\n\n  return result;\n}\n\n\nmodule.exports = {\n  kebabCase\n};","import React from 'react';\nimport { Link } from 'gatsby';\nimport { kebabCase } from '../../helpers';\nimport '../styles/components/tags.scss';\n\nfunction Tags ({ tags }) {\n  return (\n    <div className=\"tags\">\n      <h3 className=\"heading\">Categories:</h3>\n\n      <ul>\n        {tags.map(tag =>\n          <li key={kebabCase(tag)}>\n            <Link to={`/tags/${kebabCase(tag)}`} itemProp=\"url\">\n              <span itemProp=\"headline\">{tag}</span>\n            </Link>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\nexport default Tags;","import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Tags from '../components/tags';\nimport '../styles/templates/singlepost.scss';\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark;\n  const otherPosts = data.morePosts.nodes;\n  const siteTitle = data.site.siteMetadata?.title || 'Title';\n  const { previous, next, tags } = pageContext;\n  const date = post.frontmatter.date;\n  const update = post.frontmatter.update;\n\n  const Article = () => {\n    return (\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          {date && <small className=\"date\"><b>Posted on:</b> {date}</small>}\n          {update && <small className=\"date update\"><b>Updated on:</b> {update}</small>}\n        </header>\n\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n\n      </article>\n    );\n  }\n\n  const Footer = () => {\n    return(\n      <footer>\n        <Tags tags={tags} />\n\n        <div className=\"related-posts\">\n          <h3>Similar posts:</h3>\n          {otherPosts.length\n            ? otherPosts.map((post, i) =>\n              <Link key={i} to={post.fields.slug}>{post.frontmatter.title}</Link>)\n            : <p>No related posts</p>\n          }\n        </div>\n\n      </footer>\n    );\n  }\n\n  const PostNav = () => {\n    const PostLink = ({link, linkText, rel}) => {\n      return (\n        link && (\n          <li>\n            <span>{linkText} </span>\n            <Link to={link.fields.slug} rel={rel} >\n              {link.frontmatter.title}\n            </Link>\n          </li>\n        )\n      );\n    }\n\n    return(\n      <nav className=\"blog-post-nav\">\n        <ul>\n          <PostLink link={previous} linkText=\"Previous post:\" rel=\"prev\" />\n          <PostLink link={next} linkText=\"Next post:\" rel=\"next\" />\n        </ul>\n      </nav>\n    );\n  }\n\n  return (\n    <Layout location={location} title={siteTitle} className=\"single-post\">\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <div className=\"post\">\n        <Article />\n        <hr />\n        <Footer />\n        <hr />\n        <PostNav />\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        update(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    morePosts: allMarkdownRemark(\n      filter: {\n        fields: { slug: { ne: $slug } }\n      }\n      limit: 5\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n`\n\n// Add:\n// $tag: [String] to BlogPostBySlug variables\n// frontmatter: { tags: { ne: \"Projects\", in: $tag } } to morePosts filter to remove projects from the listing"],"sourceRoot":""}